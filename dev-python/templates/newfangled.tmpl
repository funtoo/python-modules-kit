export EPYTHON

# these just get passed to exeinto

used by python_domodule, maybe 12 catpkgs?
PYTHON_SITEDIR=python3.7 -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_lib())'

used by python_doheader. ONE use of this in entire pm-kit tree!
PYTHON_INCLUDEDIR=python3.7 -c 'import distutils.sysconfig; print(distutils.sysconfig.get_python_inc())

PYTHON_LIBDIR=python3.7 -c 'import os.path, sysconfig; print(os.path.join(sysconfig.get_config_var("LIBDIR"), sysconfig.get_config_var("LDLIBRARY")) if sysconfig.get_config_var("LDLIBRARY") else "")')

used by python_doexe, python_newexe, python_newscript, python_doscript (barely used)
PYTHON_SCRIPTDIR=${EPREFIX}/usr/lib/python-exec/${impl}

fixing of shebangs - map to the specific python implementation. Everything in /usr/lib/python-exec/python3.7/*
is mapped specifically to /usr/bin/python3.7 (probably should be /usr/bin/env/python3.7).?

python module optimization. domodule calls this automatically.

        case "${EPYTHON}" in
            python2.7|python3.[34])
                "${PYTHON}" -m compileall -q -f -d "${instpath}" "${d}"
                "${PYTHON}" -OO -m compileall -q -f -d "${instpath}" "${d}"
                ;;
            python*|pypy3)
                # both levels of optimization are separate since 3.5
                "${PYTHON}" -m compileall -q -f -d "${instpath}" "${d}"
                "${PYTHON}" -O -m compileall -q -f -d "${instpath}" "${d}"
                "${PYTHON}" -OO -m compileall -q -f -d "${instpath}" "${d}"
                ;;
            *)
                "${PYTHON}" -m compileall -q -f -d "${instpath}" "${d}"
                ;;


can we get rid of wrappers and just have /usr/lib/python-exec/python3.7 in path? I think so.
Then we don't install bins and can slot things.

It would still be nice to slot ebuilds and have a legacy version with just python_targets_python2.7 support. This
version HAS to be older than the current version (because you can't have a pkg with the same version and different
slots installed). We can slot it as python27-compat. Then others can depend on it like so:

RDEPEND={{python_dep('>=foo/bar')}}
which will expand to
RDEPEND="python_targets_python2.7? ( >=foo/bar[python_targets_python2.7] )  python_targets_python3.7? ( >=[python_targets_python3.7 )""

until then we need a SINGLE ebuild that supplies deprecated python2.7 support as well as 3.x support. Which we can
easily do.

Because our autogen can generate multiple ebuilds, it is easy enough (should be) to generate foo-common packages
for common files, and get things to depend upon them.

pip3 has a --no-deps option
